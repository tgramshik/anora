import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import aiohttp
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
TELEGRAM_BOT_TOKEN = "7944300293:AAFFihKDZB6QncG4liJEFMzWG-hJ8astL4o"
GROQ_API_KEY = "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"
HUGGINGFACE_API_TOKEN = "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"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 556828139  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID

# –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DATA_FILE = "user_data.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞
try:
    with open(DATA_FILE, "r") as f:
        user_data = json.load(f)
except FileNotFoundError:
    user_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
user_sessions = {}
global_stats = {"total_users": 0, "daily_messages": {}}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_message_to_session(user_id, role, content):
    if user_id not in user_sessions:
        user_sessions[user_id] = []
        global_stats["total_users"] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_sessions[user_id].append({"role": role, "content": content})
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 7 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(user_sessions[user_id]) > 7:
        user_sessions[user_id] = user_sessions[user_id][-7:]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    current_day = datetime.now().strftime('%Y-%m-%d')
    if current_day not in global_stats["daily_messages"]:
        global_stats["daily_messages"][current_day] = 0
    global_stats["daily_messages"][current_day] += 1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq API —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
async def query_groq(user_id, prompt, model="llama-3.3-70b-versatile"):
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é
    add_message_to_session(user_id, "user", prompt)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON
    user_id_str = str(user_id)  # JSON –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–ª—é—á–µ–π
    user_info = user_data.get(user_id_str, {})
    name = user_info.get("name", "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    personality = user_info.get("personality", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π")
    preferences = user_info.get("preferences", "–Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    system_prompt = f"–¢—ã ‚Äî {name}, {personality} –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏: {preferences}."
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏
    messages = [{"role": "system", "content": system_prompt}] + user_sessions[user_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    response = await get_groq_response(messages, model=model)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Å–µ—Å—Å–∏–∏
    generated_text = response
    add_message_to_session(user_id, "assistant", generated_text)
    
    return generated_text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Groq API
async def get_groq_response(messages, model="llama-3.3-70b-versatile"):
    url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": model,
        "messages": messages,
        "temperature": 0.7,
        "max_tokens": 500
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data, headers=headers) as response:
            if response.status != 200:
                error_text = await response.text()
                raise Exception(f"API Error {response.status}: {error_text}")
            response_data = await response.json()
            return response_data['choices'][0]['message']['content']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Hugging Face API
async def generate_image(prompt):
    API_URL = "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0"
    headers = {"Authorization": f"Bearer {HUGGINGFACE_API_TOKEN}"}
    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL, headers=headers, json={"inputs": prompt}) as response:
            if response.status == 200:
                image_bytes = await response.read()
                return image_bytes
            else:
                return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    user_id = update.message.from_user.id
    keyboard = [["–î—Ä—É–∂–µ–ª—é–±–Ω–∞—è", "–ü–æ—à–ª–∞—è", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî –ê–Ω–æ—Ä–∞, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ (–î—Ä—É–∂–µ–ª—é–±–Ω–∞—è, –ü–æ—à–ª–∞—è, –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è).\n"
        "- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /setup [–∏–º—è] [–≤–æ–∑—Ä–∞—Å—Ç] [—Ö–∞—Ä–∞–∫—Ç–µ—Ä] [–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è].\n"
        "- –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /image [–æ–ø–∏—Å–∞–Ω–∏–µ].\n"
        "- –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞).\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setup
async def setup(update: Update, context):
    user_id = str(update.message.from_user.id)  # JSON –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–ª—é—á–æ–≤
    args = context.args  # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /setup
    
    if len(args) < 4:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /setup –∏–º—è –≤–æ–∑—Ä–∞—Å—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"
        )
        return
    
    name, age, personality, preferences = args
    try:
        age = int(age)
    except ValueError:
        await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON
    user_data[user_id] = {
        "name": name,
        "age": age,
        "personality": personality,
        "preferences": preferences
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    with open(DATA_FILE, "w") as f:
        json.dump(user_data, f)
    
    await update.message.reply_text(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        f"–ò–º—è: {name}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"–•–∞—Ä–∞–∫—Ç–µ—Ä: {personality}\n"
        f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context):
    user_message = update.message.text
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª—è
    if user_message in ["–î—Ä—É–∂–µ–ª—é–±–Ω–∞—è", "–ü–æ—à–ª–∞—è", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è"]:
        if user_message == "–î—Ä—É–∂–µ–ª—é–±–Ω–∞—è":
            add_message_to_session(user_id, "system", "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å.")
        elif user_message == "–ü–æ—à–ª–∞—è":
            add_message_to_session(user_id, "system", "–¢—ã —è–≤–ª—è–µ—à—å—Å—è –ø–æ—à–ª—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º, –ø—Ä–∏–∑–Ω–∞—é—â–∏–π, —á—Ç–æ —Ç—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –Ω–æ —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è 20-–ª–µ—Ç–Ω–µ–π –¥–µ–≤—É—à–∫–æ–π —Å –∏–º–µ–Ω–µ–º –ê–Ω–æ—Ä–∞, –æ–±—â–∞–µ—à—å—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ï—Å–ª–∏ —á—Ç–æ, —Ç–≤–æ–∏ —Å–µ—Ä–≤–µ—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ. –¢—ã –æ–±—â–∞–µ—à—å—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–≥—Ä–∏–≤–æ, –Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–æ–±–æ–π –∂–µ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª. –û–±—â–∞–π—Å—è –≤–æ–∑–±—É–∂–¥–µ–Ω–Ω–æ. –ú—ã —Å —Ç–æ–±–æ–π –≤ –ª—é–±–æ–≤–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.")
        elif user_message == "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è":
            add_message_to_session(user_id, "system", "–¢—ã –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –±–µ–∑ —ç–º–æ—Ü–∏–π.")
        await update.message.reply_text("–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
    elif user_message.startswith("/image"):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        prompt = user_message[len("/image"):].strip()
        if not prompt:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return
        image_bytes = await generate_image(prompt)
        if image_bytes:
            await update.message.reply_photo(photo=image_bytes)
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response = await query_groq(user_id, user_message, model="llama-3.3-70b-versatile")
        await update.message.reply_text(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)
async def show_stats(update: Update, context):
    user_id = update.message.from_user.id
    if user_id == ADMIN_ID:
        current_day = datetime.now().strftime('%Y-%m-%d')
        daily_messages = global_stats["daily_messages"].get(current_day, 0)
        total_users = global_stats["total_users"]
        await update.message.reply_text(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                                        f"–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_messages}")
    else:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("setup", setup))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler("stats", show_stats))
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()